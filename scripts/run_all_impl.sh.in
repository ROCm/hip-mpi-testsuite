#!/bin/bash
###############################################################################
# Copyright (c) 2024 Advanced Micro Devices, Inc. All rights reserved.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.
###############################################################################

if [ "@HIP_UCC_SUPPORT@" = "0" ] ; then
    OPTIONS="--mca coll ^hcoll --mca pml ucx --mca osc ucx --mca btl ^openib"
else
    OPTIONS="--mca coll ^hcoll --mca coll_ucc_enable 1 --mca coll_ucc_priority 100 --mca pml ucx --mca osc ucx --mca btl ^openib"
fi

ExecTest() {

    for NUMELEMS in $3 ; do
	for MEM1 in $4 ; do
	    for MEM2 in $4 ; do
		let COUNTER=COUNTER+1
		mpirun $OPTIONS -np $2 ../src/$1 -s $MEM1 -r $MEM2 -n $NUMELEMS
		if [ $? -eq 0 ]
		then
		    let SUCCESS=SUCCESS+1
		else
		    let FAILED=FAILED+1
		fi
	    done
	done
    done
}

ExecTestSingle() {

    for NUMELEMS in $3 ; do
	for MEM in $4 ; do
	    let COUNTER=COUNTER+1
	    mpirun $OPTIONS -np $2 ../src/$1 -s $MEM  -n $NUMELEMS
	    if [ $? -eq 0 ]
	    then
		let SUCCESS=SUCCESS+1
	    else
		let FAILED=FAILED+1
	    fi
	done
    done
}


let COUNTER=0
let SUCCESS=0
let FAILED=0

if [ "@HAVE_MPIX_QUERY_ROCM@"  = "1" ] ; then
    ExecTest "hip_query_test"         "1" "1"          "D"
fi
ExecTest "hip_pt2pt_bl"             "2" "32 1048576" "D H M O R"
ExecTest "hip_pt2pt_bsend"          "2" "32 1048576" "D H M O R"
ExecTest "hip_pt2pt_ssend"          "2" "32 1048576" "D H M O R"
ExecTest "hip_pt2pt_nb"             "2" "32 1048576" "D H M O R"
ExecTest "hip_pt2pt_nb_testall"     "2" "32 1048576" "D H M O R"
ExecTest "hip_pt2pt_persistent"     "2" "32 1048576" "D H M O R"
ExecTest "hip_sendtoself"           "1" "32 1048576" "D H M O R"
ExecTest "hip_pack"                 "1" "32"         "D H M O R"
ExecTest "hip_unpack"               "1" "32"         "D H M O R"
ExecTest "hip_type_resized_short"   "2" "32"         "D H M O R"
ExecTest "hip_type_resized_long"    "2" "32"         "D H M O R"
ExecTest "hip_type_struct_short"    "2" "32"         "D H M O R"
ExecTest "hip_type_struct_long"     "2" "32"         "D H M O R"
ExecTest "hip_osc_put_fence"        "2" "32 1048576" "D H"
ExecTest "hip_osc_get_fence"        "2" "32 1048576" "D H"
ExecTest "hip_osc_acc_fence"        "2" "32 1048576" "D H"
ExecTest "hip_osc_acc_lock"         "2" "32 1048576" "D H"
ExecTest "hip_osc_put_lock"         "2" "32 1048576" "D H"
ExecTest "hip_osc_get_lock"         "2" "32 1048576" "D H"
ExecTest "hip_osc_rput_lock"        "2" "32 1048576" "D H"
ExecTest "hip_osc_rget_lock"        "2" "32 1048576" "D H"
if [ "@HIP_UCC_SUPPORT@" = "0" ] ; then
    ExecTest "hip_allreduce"        "4" "32" "D"
    ExecTest "hip_reduce"           "4" "32" "D"
    ExecTest "hip_gather"           "4" "1024"       "D H"
    ExecTest "hip_gatherv"          "4" "1024"       "D H"
    ExecTest "hip_scatter"          "4" "1024"       "D H"
    ExecTest "hip_scatterv"         "4" "1024"       "D H"
else
    ExecTest "hip_allreduce"        "4" "32 1048576" "D"
    ExecTest "hip_reduce"           "4" "32 1048576" "D"
    ExecTest "hip_iallreduce"       "4" "32 1048576" "D"
    ExecTest "hip_ireduce"          "4" "32 1048576" "D"
    ExecTest "hip_gather"           "4" "1024"       "D"
    ExecTest "hip_gatherv"          "4" "1024"       "D"
    ExecTest "hip_scatter"          "4" "1024"       "D"
    ExecTest "hip_scatterv"         "4" "1024"       "D"
fi
ExecTest "hip_alltoall"             "4" "1024"       "D H"
ExecTest "hip_alltoallv"            "4" "1024"       "D H"
ExecTest "hip_allgather"            "4" "1024"       "D H"
ExecTest "hip_allgatherv"           "4" "1024"       "D H"
ExecTest "hip_reduce_scatter"       "4" "1024"       "D H"
ExecTest "hip_reduce_scatter_block" "4" "1024"       "D H"
ExecTest "hip_pt2pt_nb_stress"      "2" "32 1048576" "D H M O R"
ExecTest "hip_sendtoself_stress"    "1" "32 1048576" "D H M O R"
ExecTestSingle "hip_osc_rget_stress"  "4" "1024" "D H"
ExecTestSingle "hip_osc_rput_stress"  "4" "1024" "D H"
ExecTest "hip_pt2pt_bl"             "2" "10 876 19680 980571" "D H"
ExecTest "hip_pt2pt_bl_mult"        "2" "1024" "D H"
printf "\n Executed %d Tests (%d passed %d failed)\n" $COUNTER $SUCCESS $FAILED
